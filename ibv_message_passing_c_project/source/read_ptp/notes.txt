== Reading /dev/ptp? ==

By default /dev/ptp0 was only accessable by root, so had to give read/write permission with:
$ sudo chmod o+rw /dev/ptp0

phc_open opened the PTP device with flags O_RDWR

Results of running after update time of 9 hours 52 minutes, which had not attempted to synchronise the PTP clock:
$ ibv_message_passing_c_project/bin/Debug/read_ptp/read_ptp /dev/ptp0 
phc_has_pps=0
phc_max_adj=23999999
CLOCK_REALTIME : res tv_sec=0 tv_nsec=1
CLOCK_REALTIME : now tv_sec=1532207767 tv_nsec=770909425
CLOCK_MONOTONIC : res tv_sec=0 tv_nsec=1
CLOCK_MONOTONIC : now tv_sec=35588 tv_nsec=315719437
/dev/ptp0 : res tv_sec=0 tv_nsec=1
/dev/ptp0 : now tv_sec=1532207786 tv_nsec=71788659

The seconds value for CLOCK_MONOTONIC matches the uptime.

The seconds value for the PTP clock is approx 19 seconds ahead of CLOCK_REALTIME.
Not sure if a different start time, or difference in clock frequency.

When debugging found that:
a) clock_gettime (CLOCK_REALTIME) and clock_gettime (CLOCK_MONOTONIC) didn't result in a syscall
b) clock_gettime (CLOCK_MONOTONIC_RAW) and the ptp0 clock ID results in syscall (__NR_clock_gettime)


== Disabling NTP to stop interferring with phc2sys trying to set CLOCK_REALTIME ==

When NTP was active, when phc2sys went to synchronise CLOCK_REALTIME to the PTP clock
phc2sys reported that had reached the "s2" synchronised state, but that where was an offset of several seconds
and was attempting to slew the clock at the maximum frequency offset. E.g.:
 Aug  8 10:13:53 BeagleBoard-X15 phc2sys: [687.556] phc offset 33279660093 s2 freq +100000000 delay   1610

The "Network time on" field from timedatectl indicates if NTP is synchronising time:
 debian@BeagleBoard-X15:~$ timedatectl status
      Local time: Wed 2018-08-08 10:18:52 UTC
  Universal time: Wed 2018-08-08 10:18:52 UTC
        RTC time: Wed 2018-08-08 10:18:52
       Time zone: Etc/UTC (UTC, +0000)
 Network time on: no
NTP synchronized: no
 RTC in local TZ: no

The following was used to disable NTP:
$ sudo timedatectl set-ntp false


 == Commands to allow linuxptp to synchronise clocks ==

On Ubuntu 16.04.LTS x86_64 used as the master:
$ ptp4l -i eno1
$ phc2sys -s /dev/ptp0 -r -w

On EVMK2H with ti-processor-sdk-linux-rt-k2hk-evm-04.03.00.05 used as a slave:
$ ptp4l -i eth1 -s
$ phc2sys -s /dev/ptp0 -r -w

On BeagleBoard-X15 with linuxptp-1.6 built from source as a slave:
$ sudo linuxptp-1.6/phc2sys -s /dev/ptp0 -r -w
$ sudo linuxptp-1.6/ptp4l -i eth0 -s


== Overhead in reading /dev/ptp? when the above commands used to synchronise PTP and realtime clocks ==

1) On x86_64 i5-2310:
a) When the intel_pstate controlling the frequency, and no specfic limits set:
$ ibv_message_passing_c_project/bin/Release/read_ptp/read_ptp /dev/ptp0
phc_has_pps=0
phc_max_adj=23999999
CLOCK_REALTIME : res tv_sec=0 tv_nsec=1
CLOCK_REALTIME : now tv_sec=1533830972 tv_nsec=433019521
CLOCK_MONOTONIC : res tv_sec=0 tv_nsec=1
CLOCK_MONOTONIC : now tv_sec=33412 tv_nsec=688864485
CLOCK_MONOTONIC_RAW : res tv_sec=0 tv_nsec=1
CLOCK_MONOTONIC_RAW : now tv_sec=33415 tv_nsec=756528246
/dev/ptp0 : res tv_sec=0 tv_nsec=1
/dev/ptp0 : now tv_sec=1533831008 tv_nsec=433033204

1000000 iterations of clock_gettime(CLOCK_REALTIME) used:
  minor page faults=0 (154 -> 154)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (1 -> 1)
  involuntary context switches=0 (2 -> 2)
  user time=0.028000 system time=0.000000
One second of elapsed time using CLOCK_REALTIME took 3099061150 HW CPU cycles (63554459 -> 3162615609)
  while CLOCK_MONOTONIC_RAW advanced 999999266 nsecs, CLOCK_MONOTONIC advanced 1000004926 nsecs and CLOCKREAL_TIME advanced 1000005079 nsecs

1000000 iterations of clock_gettime(CLOCK_MONOTONIC) used:
  minor page faults=0 (154 -> 154)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (1 -> 1)
  involuntary context switches=0 (6 -> 6)
  user time=0.020000 system time=0.000000
One second of elapsed time using CLOCK_MONOTONIC took 3111104412 HW CPU cycles (3225127827 -> 6336232239)
  while CLOCK_MONOTONIC_RAW advanced 999998514 nsecs, CLOCK_MONOTONIC advanced 1000004373 nsecs and CLOCKREAL_TIME advanced 1000004451 nsecs

1000000 iterations of clock_gettime(CLOCK_MONOTONIC_RAW) used:
  minor page faults=0 (154 -> 154)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (1 -> 1)
  involuntary context switches=2 (14 -> 16)
  user time=0.104000 system time=0.196000
One second of elapsed time using CLOCK_MONOTONIC_RAW took 3153238833 HW CPU cycles (7281721362 -> 10434960195)
  while CLOCK_MONOTONIC_RAW advanced 1000003753 nsecs, CLOCK_MONOTONIC advanced 1000009786 nsecs and CLOCKREAL_TIME advanced 1000009871 nsecs

1000000 iterations of clock_gettime(/dev/ptp0) used:
  minor page faults=0 (154 -> 154)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (1 -> 1)
  involuntary context switches=20 (21 -> 41)
  user time=0.136000 system time=2.804000
One second of elapsed time using /dev/ptp0 took 3385297464 HW CPU cycles (19574691821 -> 22959989285)
  while CLOCK_MONOTONIC_RAW advanced 1098877503 nsecs, CLOCK_MONOTONIC advanced 995098410 nsecs and CLOCKREAL_TIME advanced 995098547 nsecs
While reference CLOCK_REALTIME advanced 1.000000014 seconds, CLOCK_MONOTONIC advanced 1.000000009 seconds (or -0.0 ppm difference)
While reference CLOCK_REALTIME advanced 1.000000006 seconds, CLOCK_MONOTONIC_RAW advanced 1.028934514 seconds (or 28934.5 ppm difference)
While reference CLOCK_REALTIME advanced 1.000000005 seconds, /dev/ptp0 advanced 0.996614000 seconds (or -3386.0 ppm difference)

a) When the governor and the frequency fixed at 1.8 GHz:
$ ibv_message_passing_c_project/bin/Release/read_ptp/read_ptp /dev/ptp0
phc_has_pps=0
phc_max_adj=23999999
CLOCK_REALTIME : res tv_sec=0 tv_nsec=1
CLOCK_REALTIME : now tv_sec=1533836106 tv_nsec=802486582
CLOCK_MONOTONIC : res tv_sec=0 tv_nsec=1
CLOCK_MONOTONIC : now tv_sec=1614 tv_nsec=53853982
CLOCK_MONOTONIC_RAW : res tv_sec=0 tv_nsec=1
CLOCK_MONOTONIC_RAW : now tv_sec=1614 tv_nsec=48287506
/dev/ptp0 : res tv_sec=0 tv_nsec=1
/dev/ptp0 : now tv_sec=1533836142 tv_nsec=802507375

1000000 iterations of clock_gettime(CLOCK_REALTIME) used:
  minor page faults=0 (156 -> 156)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (6 -> 6)
  involuntary context switches=0 (1 -> 1)
  user time=0.032000 system time=0.000000
One second of elapsed time using CLOCK_REALTIME took 1803123750 HW CPU cycles (63342119 -> 1866465869)
  while CLOCK_MONOTONIC_RAW advanced 999999095 nsecs, CLOCK_MONOTONIC advanced 1000005428 nsecs and CLOCKREAL_TIME advanced 1000005613 nsecs

1000000 iterations of clock_gettime(CLOCK_MONOTONIC) used:
  minor page faults=0 (156 -> 156)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (6 -> 6)
  involuntary context switches=0 (2 -> 2)
  user time=0.036000 system time=0.000000
One second of elapsed time using CLOCK_MONOTONIC took 1802481105 HW CPU cycles (1928662325 -> 3731143430)
  while CLOCK_MONOTONIC_RAW advanced 1000000426 nsecs, CLOCK_MONOTONIC advanced 1000006457 nsecs and CLOCKREAL_TIME advanced 1000006583 nsecs

1000000 iterations of clock_gettime(CLOCK_MONOTONIC_RAW) used:
  minor page faults=0 (156 -> 156)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (6 -> 6)
  involuntary context switches=6 (8 -> 14)
  user time=0.168000 system time=0.352000
One second of elapsed time using CLOCK_MONOTONIC_RAW took 1812152015 HW CPU cycles (4676517128 -> 6488669143)
  while CLOCK_MONOTONIC_RAW advanced 1000005497 nsecs, CLOCK_MONOTONIC advanced 1000012215 nsecs and CLOCKREAL_TIME advanced 1000012436 nsecs

1000000 iterations of clock_gettime(/dev/ptp0) used:
  minor page faults=0 (156 -> 156)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (6 -> 6)
  involuntary context switches=4 (16 -> 20)
  user time=0.172000 system time=3.204000
One second of elapsed time using /dev/ptp0 took 1959432600 HW CPU cycles (12575290899 -> 14534723499)
  while CLOCK_MONOTONIC_RAW advanced 1085292654 nsecs, CLOCK_MONOTONIC advanced 990727328 nsecs and CLOCKREAL_TIME advanced 990727501 nsecs
While reference CLOCK_REALTIME advanced 1.000000005 seconds, CLOCK_MONOTONIC advanced 1.000000009 seconds (or 0.0 ppm difference)
While reference CLOCK_REALTIME advanced 1.000000023 seconds, CLOCK_MONOTONIC_RAW advanced 1.023496177 seconds (or 23496.2 ppm difference)
While reference CLOCK_REALTIME advanced 1.000000033 seconds, /dev/ptp0 advanced 0.990308500 seconds (or -9691.5 ppm difference)


2) On BeagleBoard-X15 with a 1.5 GHz CPU frequency:
debian@BeagleBoard-X15:~/linuxptp-1.6$ gcc -Wall -O3 -I. read_ptp.c phc.c -o red_ptp
debian@BeagleBoard-X15:~/linuxptp-1.6$ sudo ./read_ptp /dev/ptp0
phc_has_pps=0
phc_max_adj=1000000
CLOCK_REALTIME : res tv_sec=0 tv_nsec=1
CLOCK_REALTIME : now tv_sec=1533823754 tv_nsec=472005847
CLOCK_MONOTONIC : res tv_sec=0 tv_nsec=1
CLOCK_MONOTONIC : now tv_sec=1454 tv_nsec=792149872
CLOCK_MONOTONIC_RAW : res tv_sec=0 tv_nsec=1
CLOCK_MONOTONIC_RAW : now tv_sec=1454 tv_nsec=792397379
/dev/ptp0 : res tv_sec=0 tv_nsec=1
/dev/ptp0 : now tv_sec=1533823790 tv_nsec=472074749

1000000 iterations of clock_gettime(CLOCK_REALTIME) used:
  minor page faults=0 (155 -> 155)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (1 -> 1)
  involuntary context switches=40 (3 -> 43)
  user time=0.152023 system time=0.000354
One second of elapsed time using CLOCK_REALTIME took 1484181845 HW CPU cycles (226057445 -> 1710239290)
  while CLOCK_MONOTONIC_RAW advanced 1000030256 nsecs, CLOCK_MONOTONIC advanced 1000015456 nsecs and CLOCKREAL_TIME advanced 1000016106 nsecs

1000000 iterations of clock_gettime(CLOCK_MONOTONIC) used:
  minor page faults=0 (155 -> 155)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (1 -> 1)
  involuntary context switches=14 (252 -> 266)
  user time=0.152716 system time=0.000000
One second of elapsed time using CLOCK_MONOTONIC took 1473086853 HW CPU cycles (1939549957 -> 3412636810)
  while CLOCK_MONOTONIC_RAW advanced 1000028466 nsecs, CLOCK_MONOTONIC advanced 1000013872 nsecs and CLOCKREAL_TIME advanced 1000014360 nsecs

1000000 iterations of clock_gettime(CLOCK_MONOTONIC_RAW) used:
  minor page faults=0 (155 -> 155)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (1 -> 1)
  involuntary context switches=180 (514 -> 694)
  user time=0.146384 system time=0.468854
One second of elapsed time using CLOCK_MONOTONIC_RAW took 1482382350 HW CPU cycles (4335509643 -> 5817891993)
  while CLOCK_MONOTONIC_RAW advanced 1000008296 nsecs, CLOCK_MONOTONIC advanced 999992941 nsecs and CLOCKREAL_TIME advanced 999993754 nsecs

1000000 iterations of clock_gettime(/dev/ptp0) used:
  minor page faults=0 (155 -> 155)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (1 -> 1)
  involuntary context switches=247 (956 -> 1203)
  user time=0.187180 system time=1.962080
One second of elapsed time using /dev/ptp0 took 1495533701 HW CPU cycles (9042216513 -> 10537750214)
  while CLOCK_MONOTONIC_RAW advanced 1000031557 nsecs, CLOCK_MONOTONIC advanced 1000016479 nsecs and CLOCKREAL_TIME advanced 1000016968 nsecs
While reference CLOCK_REALTIME advanced 1.000000142 seconds, CLOCK_MONOTONIC advanced 1.000000141 seconds (or -0.0 ppm difference)
While reference CLOCK_REALTIME advanced 1.000000024 seconds, CLOCK_MONOTONIC_RAW advanced 1.000016430 seconds (or 16.4 ppm difference)
While reference CLOCK_REALTIME advanced 1.000000060 seconds, /dev/ptp0 advanced 1.000004478 seconds (or 4.4 ppm difference)


3) On EVMK2H (with a 1.4 GHz CPU frequency):
root@k2hk-evm:~/linuxptp-1.6# gcc -Wall -O3 -I. read_ptp.c phc.c -o read_ptp
root@k2hk-evm:~/linuxptp-1.6# ./read_ptp /dev/ptp0
phc_has_pps=0
phc_max_adj=1000000
CLOCK_REALTIME : res tv_sec=0 tv_nsec=1
CLOCK_REALTIME : now tv_sec=1533823924 tv_nsec=392514041
CLOCK_MONOTONIC : res tv_sec=0 tv_nsec=1
CLOCK_MONOTONIC : now tv_sec=1594 tv_nsec=370172309
CLOCK_MONOTONIC_RAW : res tv_sec=0 tv_nsec=1
CLOCK_MONOTONIC_RAW : now tv_sec=1594 tv_nsec=369760945
/dev/ptp0 : res tv_sec=0 tv_nsec=1
/dev/ptp0 : now tv_sec=1533823960 tv_nsec=392303848

1000000 iterations of clock_gettime(CLOCK_REALTIME) used:
  minor page faults=0 (164 -> 164)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (10 -> 10)
  involuntary context switches=19 (8 -> 27)
  user time=0.190000 system time=0.000000
One second of elapsed time using CLOCK_REALTIME took 1395437386 HW CPU cycles (258099382 -> 1653536768)
  while CLOCK_MONOTONIC_RAW advanced 999948465 nsecs, CLOCK_MONOTONIC advanced 1000010314 nsecs and CLOCKREAL_TIME advanced 1000010964 nsecs

1000000 iterations of clock_gettime(CLOCK_MONOTONIC) used:
  minor page faults=0 (164 -> 164)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (10 -> 10)
  involuntary context switches=20 (134 -> 154)
  user time=0.190000 system time=0.000000
One second of elapsed time using CLOCK_MONOTONIC took 1397386921 HW CPU cycles (1914122701 -> 3311509622)
  while CLOCK_MONOTONIC_RAW advanced 1000127900 nsecs, CLOCK_MONOTONIC advanced 1000007195 nsecs and CLOCKREAL_TIME advanced 1000007750 nsecs

1000000 iterations of clock_gettime(CLOCK_MONOTONIC_RAW) used:
  minor page faults=0 (164 -> 164)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (10 -> 10)
  involuntary context switches=51 (262 -> 313)
  user time=0.100000 system time=0.380000
One second of elapsed time using CLOCK_MONOTONIC_RAW took 1397300066 HW CPU cycles (3993139665 -> 5390439731)
  while CLOCK_MONOTONIC_RAW advanced 1000006165 nsecs, CLOCK_MONOTONIC advanced 999889465 nsecs and CLOCKREAL_TIME advanced 999890075 nsecs

1000000 iterations of clock_gettime(/dev/ptp0) used:
  minor page faults=0 (164 -> 164)
  major page faults=0 (0 -> 0)
  voluntary context switches=0 (10 -> 10)
  involuntary context switches=182 (418 -> 600)
  user time=0.160000 system time=1.550000
One second of elapsed time using /dev/ptp0 took 1397342593 HW CPU cycles (7784683578 -> 9182026171)
  while CLOCK_MONOTONIC_RAW advanced 1000012175 nsecs, CLOCK_MONOTONIC advanced 999999377 nsecs and CLOCKREAL_TIME advanced 1000000122 nsecs
While reference CLOCK_REALTIME advanced 1.000000064 seconds, CLOCK_MONOTONIC advanced 0.999999984 seconds (or -0.1 ppm difference)
While reference CLOCK_REALTIME advanced 1.000000066 seconds, CLOCK_MONOTONIC_RAW advanced 0.999993300 seconds (or -6.8 ppm difference)
While reference CLOCK_REALTIME advanced 1.000000055 seconds, /dev/ptp0 advanced 0.999996032 seconds (or -4.0 ppm difference)


== Glitches in synchronised time ==

a) After running the read_ptp program, noticed the EVMK2H and BeagleBoard-X15 syslog was reporting a large offset
and were adjusting their clock frequencies at a high rate.

Looking at the BeagleBoard-X15 syslog around when the large offset appeared:
Aug  8 18:40:00 BeagleBoard-X15 ptp4l: [30141.193] master offset         -7 s2 freq  +16526 path delay      3447
Aug  8 18:40:00 BeagleBoard-X15 phc2sys: [30141.441] phc offset      -116 s2 freq  +16480 delay   1789
Aug  8 18:40:01 BeagleBoard-X15 ptp4l: [30142.193] master offset         15 s2 freq  +16546 path delay      3504
Aug  8 18:40:01 BeagleBoard-X15 phc2sys: [30142.441] phc offset      -132 s2 freq  +16430 delay   1789
Aug  8 18:40:02 BeagleBoard-X15 ptp4l: [30143.193] master offset        359 s2 freq  +16894 path delay      3504
Aug  8 18:40:02 BeagleBoard-X15 phc2sys: [30143.442] phc offset      -171 s2 freq  +16351 delay   1789
Aug  8 18:40:03 BeagleBoard-X15 ptp4l: [30144.193] master offset          4 s2 freq  +16647 path delay      3511
Aug  8 18:40:03 BeagleBoard-X15 phc2sys: [30144.442] phc offset       392 s2 freq  +16863 delay   1626
Aug  8 18:40:04 BeagleBoard-X15 ptp4l: [30145.193] master offset   31024551 s2 freq +1000000 path delay      3511
Aug  8 18:40:04 BeagleBoard-X15 phc2sys: [30145.442] phc offset    245456 s2 freq +262044 delay   1626
Aug  8 18:40:05 BeagleBoard-X15 ptp4l: [30146.233] master offset  123651474 s2 freq +1000000 path delay      3496
Aug  8 18:40:05 BeagleBoard-X15 phc2sys: [30146.442] phc offset    983579 s2 freq +1073804 delay   1789
Aug  8 18:40:06 BeagleBoard-X15 ptp4l: [30147.332] master offset  221286603 s2 freq +1000000 path delay      3496
Aug  8 18:40:06 BeagleBoard-X15 phc2sys: [30147.442] phc offset    907843 s2 freq +1293142 delay   1787
Aug  8 18:40:07 BeagleBoard-X15 ptp4l: [30148.437] master offset  319517648 s2 freq +1000000 path delay      3496
Aug  8 18:40:07 BeagleBoard-X15 phc2sys: [30148.443] phc offset    614066 s2 freq +1271718 delay   1787
Aug  8 18:40:08 BeagleBoard-X15 phc2sys: [30149.443] phc offset    341861 s2 freq +1183732 delay   1624
Aug  8 18:40:08 BeagleBoard-X15 ptp4l: [30149.545] master offset  364957096 s2 freq +1000000 path delay  -5105100
Aug  8 18:40:09 BeagleBoard-X15 phc2sys: [30150.443] phc offset    157537 s2 freq +1101967 delay   1787
Aug  8 18:40:09 BeagleBoard-X15 ptp4l: [30150.586] master offset  363932435 s2 freq +1000000 path delay  -5105100
Aug  8 18:40:10 BeagleBoard-X15 phc2sys: [30151.443] phc offset     55259 s2 freq +1046950 delay   1787
Aug  8 18:40:10 BeagleBoard-X15 ptp4l: [30151.586] master offset  362947860 s2 freq +1000000 path delay  -5105100
Aug  8 18:40:11 BeagleBoard-X15 phc2sys: [30152.443] phc offset      8412 s2 freq +1016681 delay   1787
Aug  8 18:40:11 BeagleBoard-X15 ptp4l: [30152.576] master offset  361973778 s2 freq +1000000 path delay  -5105055
Aug  8 18:40:12 BeagleBoard-X15 phc2sys: [30153.444] phc offset     -8292 s2 freq +1002500 delay   1787
Aug  8 18:40:12 BeagleBoard-X15 ptp4l: [30153.564] master offset  361000682 s2 freq +1000000 path delay  -5105055
Aug  8 18:40:13 BeagleBoard-X15 phc2sys: [30154.444] phc offset    -10630 s2 freq +997675 delay   1787
Aug  8 18:40:13 BeagleBoard-X15 ptp4l: [30154.556] master offset  360021754 s2 freq +1000000 path delay  -5102330
Aug  8 18:40:14 BeagleBoard-X15 phc2sys: [30155.444] phc offset     -8393 s2 freq +996723 delay   1787
Aug  8 18:40:14 BeagleBoard-X15 ptp4l: [30155.550] master offset  353901882 s2 freq +1000000 path delay     38435
Aug  8 18:40:15 BeagleBoard-X15 phc2sys: [30156.444] phc offset     -5025 s2 freq +997573 delay   1787

And it took about an hour before the frequency adjustment went below the maximum:
Aug  8 19:41:40 BeagleBoard-X15 ptp4l: [33841.360] master offset    3851244 s2 freq +1000000 path delay    312868
Aug  8 19:41:40 BeagleBoard-X15 phc2sys: [33842.160] phc offset       214 s2 freq +1000191 delay   1787
Aug  8 19:41:41 BeagleBoard-X15 ptp4l: [33842.359] master offset    2867765 s2 freq +1000000 path delay    312868
Aug  8 19:41:41 BeagleBoard-X15 phc2sys: [33843.160] phc offset        41 s2 freq +1000082 delay   1787
Aug  8 19:41:42 BeagleBoard-X15 ptp4l: [33843.358] master offset    1853819 s2 freq +1000000 path delay    343289
Aug  8 19:41:42 BeagleBoard-X15 phc2sys: [33844.160] phc offset       -48 s2 freq +1000006 delay   1787
Aug  8 19:41:43 BeagleBoard-X15 ptp4l: [33844.357] master offset     870415 s2 freq +887059 path delay    343289
Aug  8 19:41:43 BeagleBoard-X15 phc2sys: [33845.161] phc offset    -90924 s2 freq +909115 delay   1950
Aug  8 19:41:44 BeagleBoard-X15 ptp4l: [33845.356] master offset      29219 s2 freq +306987 path delay    313933
Aug  8 19:41:44 BeagleBoard-X15 phc2sys: [33846.161] phc offset   -580743 s2 freq +392019 delay   1788
Aug  8 19:41:45 BeagleBoard-X15 ptp4l: [33846.355] master offset    -261363 s2 freq  +25171 path delay    313933
Aug  8 19:41:45 BeagleBoard-X15 phc2sys: [33847.161] phc offset   -893756 s2 freq  -95217 delay   1788

The syslog from the x86_64 master around the time the BeagleBoard-X15 reported the large offset.
Allowing for the hour difference due to the master being on daylight savings, the master and slave saw the glitch
in the same second:
Aug  8 19:40:01 Sandy-Ubuntu phc2sys: [42437.969] phc offset      -607 s2 freq   -6287 delay   2591
Aug  8 19:40:02 Sandy-Ubuntu phc2sys: [42438.969] phc offset       638 s2 freq   -5224 delay   2454
Aug  8 19:40:03 Sandy-Ubuntu phc2sys: [42439.969] phc offset       -16 s2 freq   -5687 delay   2322
Aug  8 19:40:04 Sandy-Ubuntu phc2sys: [42440.969] phc offset  47587733 s2 freq +47582057 delay   4563
Aug  8 19:40:05 Sandy-Ubuntu phc2sys: [42441.969] phc offset  91882708 s2 freq +100000000 delay   3807
Aug  8 19:40:06 Sandy-Ubuntu phc2sys: [42442.969] phc offset  80758405 s2 freq +95029049 delay   4269
Aug  8 19:40:07 Sandy-Ubuntu phc2sys: [42443.969] phc offset  74872117 s2 freq +100000000 delay   4405

The glitch also appeared in the EMVK2H syslog, but rebooted while investigating and the results were not saved.


b) Monitored syslog after running read_ptp on the master, and around the time the program was run the master
and slaves reported a glitch:
Aug  8 22:10:50 Sandy-Ubuntu phc2sys: [51487.374] phc offset       -75 s2 freq   -5752 delay   2297
Aug  8 22:10:51 Sandy-Ubuntu phc2sys: [51488.374] phc offset      -552 s2 freq   -6251 delay   2471
Aug  8 22:10:52 Sandy-Ubuntu phc2sys: [51489.374] phc offset       394 s2 freq   -5471 delay   2466
Aug  8 22:10:53 Sandy-Ubuntu phc2sys: [51490.375] phc offset       734 s2 freq   -5013 delay   2400
Aug  8 22:10:54 Sandy-Ubuntu phc2sys: [51491.375] phc offset       150 s2 freq   -5376 delay   2276
Aug  8 22:10:55 Sandy-Ubuntu phc2sys: [51492.375] phc offset  34648143 s2 freq +34642662 delay   4877
Aug  8 22:10:56 Sandy-Ubuntu phc2sys: [51493.375] phc offset  92357050 s2 freq +100000000 delay   3861
Aug  8 22:10:57 Sandy-Ubuntu phc2sys: [51494.375] phc offset  81604608 s2 freq +91993569 delay   3580
Aug  8 22:10:58 Sandy-Ubuntu phc2sys: [51495.375] phc offset  79591791 s2 freq +100000000 delay   4486
Aug  8 22:10:59 Sandy-Ubuntu phc2sys: [51496.375] phc offset   5134694 s2 freq +40005038 delay   2186
Aug  8 22:11:00 Sandy-Ubuntu phc2sys: [51497.375] phc offset -36483179 s2 freq  -72427 delay   2308

Aug  8 21:10:54 k2hk-evm ptp4l: [5627.214] master offset        -41 s2 freq   -2937 path delay     17148
Aug  8 21:10:54 k2hk-evm phc2sys: [5627.413] CLOCK_REALTIME phc offset       323 s2 freq   -2680 delay   1080
Aug  8 21:10:55 k2hk-evm ptp4l: [5628.214] master offset   17745806 s2 freq +1000000 path delay     17148
Aug  8 21:10:55 k2hk-evm phc2sys: [5628.413] CLOCK_REALTIME phc offset    199660 s2 freq +196754 delay   1055
Aug  8 21:10:56 k2hk-evm ptp4l: [5629.243] master offset  109727286 s2 freq +1000000 path delay     17148
Aug  8 21:10:56 k2hk-evm phc2sys: [5629.413] CLOCK_REALTIME phc offset   1002616 s2 freq +1059608 delay   1065
Aug  8 21:10:57 k2hk-evm ptp4l: [5630.339] master offset  207618771 s2 freq +1000000 path delay     17148
Aug  8 21:10:57 k2hk-evm phc2sys: [5630.413] CLOCK_REALTIME phc offset    950912 s2 freq +1308688 delay   1044
Aug  8 21:10:58 k2hk-evm phc2sys: [5631.413] CLOCK_REALTIME phc offset    642109 s2 freq +1285159 delay   1064
Aug  8 21:10:58 k2hk-evm ptp4l: [5631.441] master offset  306008862 s2 freq +1000000 path delay     17148
Aug  8 21:10:59 k2hk-evm phc2sys: [5632.413] CLOCK_REALTIME phc offset    356166 s2 freq +1191849 delay   1079

 
Aug  8 21:10:54 BeagleBoard-X15 phc2sys: [39195.260] phc offset       -35 s2 freq  +16514 delay   1789
Aug  8 21:10:54 BeagleBoard-X15 ptp4l: [39195.595] master offset        -82 s2 freq  +16544 path delay      3456
Aug  8 21:10:55 BeagleBoard-X15 phc2sys: [39196.260] phc offset       311 s2 freq  +16850 delay   1789
Aug  8 21:10:55 BeagleBoard-X15 ptp4l: [39196.594] master offset   17745780 s2 freq +1000000 path delay      3456
Aug  8 21:10:56 BeagleBoard-X15 phc2sys: [39197.260] phc offset    654560 s2 freq +671192 delay   1789
Aug  8 21:10:56 BeagleBoard-X15 ptp4l: [39197.624] master offset  109747397 s2 freq +1000000 path delay      3456
Aug  8 21:10:57 BeagleBoard-X15 phc2sys: [39198.260] phc offset    988176 s2 freq +1201176 delay   1788
Aug  8 21:10:57 BeagleBoard-X15 ptp4l: [39198.720] master offset  207660293 s2 freq +1000000 path delay      3350
Aug  8 21:10:58 BeagleBoard-X15 phc2sys: [39199.261] phc offset    787720 s2 freq +1297173 delay   1787
Aug  8 21:10:58 BeagleBoard-X15 ptp4l: [39199.821] master offset  306072003 s2 freq +1000000 path delay      3272
Aug  8 21:10:59 BeagleBoard-X15 phc2sys: [39200.261] phc offset    490380 s2 freq +1236149 delay   1624
 