# Top level CMake file

project (ibv_message_passing C CXX)
cmake_minimum_required (VERSION 2.8)

# Set platform build flags
if ("${PLATFORM_TYPE}" STREQUAL "Debug")
   set (PLATFORM_CFLAGS "-g")
elseif ("${PLATFORM_TYPE}" STREQUAL "Release")
   set (PLATFORM_CFLAGS "-O3 -g -flto -fuse-linker-plugin")
elseif ("${PLATFORM_TYPE}" STREQUAL "Coverage")
   set (PLATFORM_CFLAGS "-g --coverage -fprofile-update=atomic --save-temps")
else()
   message ("Unknown platform")
endif()

# -fmessage-length=0 is to allow Eclipse traceback for error messages
set (COMMON_FLAGS "${PLATFORM_CFLAGS} -Wall -fmessage-length=0")

set (CMAKE_C_FLAGS "${COMMON_FLAGS}")
set (CMAKE_CXX_FLAGS "${COMMON_FLAGS}")

# To use -flto need to use the gcc versions of ar and ranlib
SET(CMAKE_AR "gcc-ar")
SET(CMAKE_RANLIB "gcc-ranlib")

add_subdirectory ("${PROJECT_SOURCE_DIR}/ibv_message_transport")
add_subdirectory ("${PROJECT_SOURCE_DIR}/ibv_message_bw")
add_subdirectory ("${PROJECT_SOURCE_DIR}/ibv_display_infiniband_counters")
add_subdirectory ("${PROJECT_SOURCE_DIR}/display_kernel_threads")
add_subdirectory ("${PROJECT_SOURCE_DIR}/ibv_c_structure_size")
add_subdirectory ("${PROJECT_SOURCE_DIR}/ibv_worker_process")
add_subdirectory ("${PROJECT_SOURCE_DIR}/test_multithreaded_mempolicy")
add_subdirectory ("${PROJECT_SOURCE_DIR}/ibv_functional_loopback_test")
add_subdirectory ("${PROJECT_SOURCE_DIR}/ibv_pingpong_measurements")
add_subdirectory ("${PROJECT_SOURCE_DIR}/virtual_inheritence")
add_subdirectory ("${PROJECT_SOURCE_DIR}/gdb_unblock_sigchld")
add_subdirectory ("${PROJECT_SOURCE_DIR}/vector_test_load")
add_subdirectory ("${PROJECT_SOURCE_DIR}/ibv_time_sync_measurement")
add_subdirectory ("${PROJECT_SOURCE_DIR}/floor_it")
add_subdirectory ("${PROJECT_SOURCE_DIR}/ibv_message_latency")

# Location of the source code for the linuxptp package, to gain access to the phc.[ch]
set (LINUXPTP_ROOT "$ENV{HOME}/linuxptp-1.6")

if (EXISTS ${LINUXPTP_ROOT})
    add_subdirectory ("${PROJECT_SOURCE_DIR}/read_ptp")
endif()

# Add a custom target which builds the GPR project which contains all the Ada exececutables.
# This target depends on the Ada interface specs and library generated by the ibv_message_transport C project,
# so the CMake generated makefiles don't start to compile the Ada executables until the dependencies are available.
add_custom_target (ibv_message_passing_ada_project ALL
                   gnatmake -r -P${CMAKE_SOURCE_DIR}/../../ibv_message_passing_ada_project/ibv_message_passing_ada_project_link.gpr -p -Xmode=${PLATFORM_TYPE}
                   DEPENDS ibv_message_transport ibv_message_transport_ada_spec)
